from pathlib import Path

###Parameters: Might be given from a config file--> To be changed

#####Model generated by using WGS blood samples that can be seen in /home/projects/cu_10047/data/references/hg19/PoN/gCNV/20190331_WGS/crams_pon_WGS####
#PoN="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/PoN/gCNV/20190401_WGS/"
PoN="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/PoN/gCNV/20190402_WES/"

#PoN="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/PoN/gCNV/20190331_WGS/"

#Reference file: hg19
REF="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/sequence/ref.fa"

#BED file: Exome
BED="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/regions/S04380110_Covered_BED.bed"


DIC="/home/projects/cu_10047/pipelines/gatk3/resources/hg19/sequence/ref.dict"

####SAMPLES: Might be given from upstream rule

#Samples to be run: crams specified in CRAMS_cnv_GermlineCNVCaller.txt
cram_list = []
with open("CRAMS_cnv_GermlineCNVCaller.txt","r") as path_to_crams:
	for crams_path in path_to_crams:
		if len(crams_path) < 2: continue
		cram_list.append(crams_path.rstrip())


#Output file
def Destination_file(CRAM):
	name = Path(CRAM).stem
	destination = name + "_GermlineCNVCaller.vcf.gz"
	return(destination)

targets = []
for CRAM in cram_list:
	final = Destination_file(CRAM)
	targets.append(final)

rule all:
	input: 
		targets

PATH = str(Path(CRAM).parent)


rule GermlineCNVCaller:
	input:
		cram = PATH + "/{NAME}.cram",
		ref = REF,
		bed = BED,
		PoN = PoN,
		dic = DIC
	output:
		hdf5 = temp("{NAME}.hdf5"),
		vcf_1 = temp("{NAME}_GermlineCNVCaller_unsort.vcf.gz"),
		vcf_sort = "{NAME}_GermlineCNVCaller.vcf.gz",
		tbi = "{NAME}_GermlineCNVCaller.vcf.gz.tbi"
	log: "logs/{NAME}"
	threads: 1
	version: "4.1.0.0"
	shell:
                "module load anaconda3/4.4.0 gcc/8.2.0 java/1.8.0 gatk/{version}; \n"
                # Create TMP folder
                "mkdir -p temp ; \n"
                # Collect read counts from sample
                "gatk CollectReadCounts -I {input.cram} -R {input.ref} -L {input.bed} --interval-merging-rule OVERLAPPING_ONLY -O {output.hdf5}; \n"

                ### Run gCNV caller
                "source activate /home/projects/cu_10047/people/filipev/.conda/envs/gatk_{version}; \n"
                # Call germline CNV
                "gatk DetermineGermlineContigPloidy -I {output.hdf5} --model {input.PoN}contig_ploidy-model --output temp  --output-prefix {wildcards.NAME}.contig_ploidy; \n"
                "gatk GermlineCNVCaller -I {output.hdf5} --run-mode CASE --model {input.PoN}shard_path-model --contig-ploidy-calls temp/{wildcards.NAME}.contig_ploidy-calls --interval-merging-rule OVERLAPPING_ONLY --output temp --output-prefix {wildcards.NAME}.shard_path; \n"
                "gatk PostprocessGermlineCNVCalls --model-shard-path {input.PoN}shard_path-model --contig-ploidy-calls temp/{wildcards.NAME}.contig_ploidy-calls --calls-shard-path temp/{wildcards.NAME}.shard_path-calls --sample-index 0 --autosomal-ref-copy-number 2 --allosomal-contig X --allosomal-contig Y --output-genotyped-intervals /dev/stdout | perl -p -e 's/<DEL>,<DUP>/<CNV>/' | bgzip > {output.vcf_1}; \n"
                "conda deactivate; \n"

                # Sort VCF (mostly to fix header)
                "gatk SortVcf -I {output.vcf_1} --SEQUENCE_DICTIONARY {input.dic} --COMPRESSION_LEVEL 9 --CREATE_INDEX true -O {output.vcf_sort} "                
